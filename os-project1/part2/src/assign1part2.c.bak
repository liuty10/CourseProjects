//filename: assign1part2.c
//
//1. use a simple physical page allocation initially
//2. if there are some physical pages that are available, you will always allocate from the 
//   free list at first.
//3. if no free physical frame, use LRU replacement policy
//   a. change old entry, no two pages pointing to the same physical address.
//   b. change the entry to point to the frame.
//   c. reserve mapping on the physical page
//4. checksum report
//5. count the number of page faults
//
//
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/stat.h>
#include <sys/mman.h>
#include <sys/types.h>
#include <fcntl.h>
#include <errno.h>

//#include "list.h"
#include "phypages.h"
#include "pagetable.h"

// The number of pages will be used for the kernel
#define KERNEL_PAGES 1
#define REAL_PAGE_SIZE 4096
#define FRAME_TOTAL 8
#define LRU_NUM 10
#define LRU_LEN 30

char * sequenceFileName;

struct pagetable_type pagetable[32];
struct frame_type frames[FRAME_TOTAL];
struct frame_type *freelist_head;
unsigned int  free_total;
unsigned char  lru_flag;
unsigned long  old_page_num;
unsigned long access_array[LRU_LEN];
unsigned long pagefault = 0;

  //freelist_head is not free, it's for system: frame0
void init_pagetable(){
   /*pagetable[0].valid=1;
   pagetable[0].frame_num=2;
   pagetable[1].valid=1;
   pagetable[1].frame_num=4; 
   pagetable[2].valid=1;
   pagetable[2].frame_num=1;
   pagetable[3].valid=1;
   pagetable[3].frame_num=7;
   pagetable[4].valid=1;
   pagetable[4].frame_num=3;
   pagetable[5].valid=1;
   pagetable[5].frame_num=5;
   pagetable[6].valid=1;
   pagetable[6].frame_num=6;*/
   
   for(int i=0;i<32;i++)
       pagetable[i].valid = 0;
}

void init_frames(){
    /*freelist_head = frames;
    int i;
    for(i=0;i<FRAME_TOTAL-1;i++){
      frames[i].available = 0;
      frames[i].frame_num = i;
      frames[i].lru_num = LRU_NUM;
      frames[i].next_free = &frames[i+1]; 
    }
    frames[i].available = 0;
    frames[i].next_free = NULL;
    frames[i].frame_num = i;
    frames[i].lru_num = LRU_NUM;
    frames[1].page_num = 2;
    frames[2].page_num = 0;
    frames[3].page_num = 4;
    frames[4].page_num = 1;
    frames[5].page_num = 5;
    frames[6].page_num = 6;
    frames[7].page_num = 3;
   
    free_total = FRAME_TOTAL - 8;*/

    freelist_head = frames;
    int i;
    for(i=0;i<FRAME_TOTAL-1;i++){
      frames[i].available = 1;
      frames[i].frame_num = i;
      frames[i].lru_num = LRU_NUM;
      frames[i].next_free = &frames[i+1]; 
    }
    frames[i].available = 0;
    frames[i].next_free = NULL;
    frames[i].frame_num = i;
    frames[i].lru_num = LRU_NUM;
    free_total = FRAME_TOTAL-1;
}

unsigned int check_list(){
    return free_total;
}
/*
void add_to_list(struct frame *cur_frame){
    cur_frame->next_free = freelist_head->next_free;
    freelist_head->next_free = cur_frame;
    cur_frame->available = true;
    free_total++;
}
*/
unsigned long remove_from_list(unsigned long page_num){
    struct frame_type* target_frame = freelist_head->next_free;
    freelist_head->next_free = target_frame->next_free;
    target_frame->available = 0;
    target_frame->page_num = page_num;
    target_frame->next_free = NULL;
    target_frame->lru_num = LRU_NUM;
    free_total--;
    lru_flag = 0;
    return target_frame->frame_num;
}

unsigned int FindSmallestLRU(){
    unsigned int smallest_index=1;
   // printf("lru_num[%d]: %d\n",1,frames[1].lru_num);
    for(int j=2;j<=7;j++){
   //     printf("lru_num[%d]: %d\n",j,frames[j].lru_num);
        if(frames[j].lru_num<frames[smallest_index].lru_num)
	     smallest_index = j;
    }
   // printf("smallest_index: %d\n",smallest_index);
    return smallest_index; 
}

unsigned long lru_replacement(unsigned long page_num){
    // fix replacement 
    lru_flag = 1;
    //todo: add lru here    
    struct frame_type* target_frame = &frames[FindSmallestLRU()];
    old_page_num = target_frame->page_num;
    target_frame->page_num = page_num;
    target_frame->lru_num = LRU_NUM;
    /*for(int j=1;j<=7;j++){
        frames[j].lru_num--;
    //    printf("after replacement: lru_num[%d]: %d\n",j,frames[j].lru_num);
    }*/
    return target_frame->frame_num;
}

unsigned long FindFrame(unsigned long page_num){
  if(check_list())
     return remove_from_list(page_num);
  else
     return lru_replacement(page_num);
} 



size_t alignup(size_t size, size_t alignto) {
  return ((size + (alignto - 1)) & ~(alignto - 1));
}

void analyzeAccessSequenceFromFile(char * fileName) {
	// Open this file 
	int fd;
	struct stat st;
	unsigned long filesize;
	unsigned long mapsize;

	unsigned long * memAccesses;
	stat(fileName, &st);

	filesize = st.st_size;

	fd = open(fileName, O_RDONLY); 
	if(fd == -1) {
		fprintf(stderr, "fd is invalid, with error %s\n", strerror(errno));
		exit(-1);
	}

	// Compute the aligned size;
	mapsize = alignup (filesize, REAL_PAGE_SIZE);

	memAccesses = (unsigned long *)mmap(0, mapsize, PROT_READ, MAP_PRIVATE, fd, 0);
	if(memAccesses == MAP_FAILED) {
		fprintf(stderr, "mmap the input file failed. \n");
		exit(-1);
	}		

	fprintf(stderr, "map starting %p filesize %ld\n", memAccesses, filesize);
        FILE *fp=fopen("../result/output-part2","wb");
	unsigned long page_num = 0;
	unsigned long phy_num = 0;
        unsigned long page_offset = 0;
        unsigned long phy_addr = 0;
        init_pagetable();
        init_frames();
	// Traverse all memory accesses of the file
	for(int i = 0; i < filesize/sizeof(unsigned long); i++) {
	       // Simulate the running
               page_num = (memAccesses[i]>>7);
               page_offset = memAccesses[i] & 0x000000000000007f;
               if(pagetable[page_num].valid){
               	  phy_num = pagetable[page_num].frame_num;
                  printf("page hit!page_num: %d\n",page_num);
                  access_array[i%LRU_LEN]=phy_num;
                  frames[phy_num].lru_num++;
                  /*for(int j=1;j<=7;j++){
                  //   printf("hit status: lru_num[%d]: %d\n",j,frames[j].lru_num);
                     frames[j].lru_num--;
                  //   printf("after hit: lru_num[%d]: %d\n",j,frames[j].lru_num);
                  }
                  frames[phy_num].lru_num+=2;*/
                  //printf("after hit: lru_num[%d]: %d\n",phy_num,frames[phy_num].lru_num);
               }else{//page fault occur
                  pagefault++;
                  //printf("page fault!page_num: %d\n",page_num);
                  phy_num = FindFrame(page_num);
                  pagetable[page_num].frame_num = phy_num;
                  pagetable[page_num].valid = 1;
                  printf("pagefault occurs: page_num: %d, phy_num: %d, old_page_num: %d \n"
                                                          ,page_num, phy_num, old_page_num);
                  if(lru_flag == 1){
                  	pagetable[old_page_num].valid = 0;
                        frames[access_array[i%LRU_LEN]].lru_num--;
                        access_array[i%LRU_LEN]=phy_num;
                        frames[phy_num].lru_num++;
                  }else{
                        access_array[i%LRU_LEN]=phy_num;
                        frames[phy_num].lru_num++;
                  }
               }
               
               phy_addr = (phy_num<<7) | page_offset;
               fwrite(&phy_addr,sizeof(unsigned long),1,fp);
               fprintf(stderr, "%d: page_num: %lx, phy_num: %lx\n", i, page_num, phy_num);
	} 
        fclose(fp);
}
 
int main(int argc, char ** argv) {
	int i;
	int accesses; 

	sequenceFileName = argv[1];

	// Check whether the sequence file is existing and I can access this file?
	if(access(sequenceFileName, F_OK ) == -1 ) {
                fprintf(stderr, "The sequence file %s is not existing\n", sequenceFileName);
		exit(-1);
	} 

	// Now analyze the access sequence of the input sequence file
	analyzeAccessSequenceFromFile(sequenceFileName);
        printf("pagefault: %d\n", pagefault);
}

